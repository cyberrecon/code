##########################################################################
# capistrano task for installing mysql
##########################################################################
run "#{sudo} apt-get -y install mysql-server" do |channel, stream, data|
  # prompts for mysql root password (when blue screen appears)
  channel.send_data("#{mysql_root_password}\n\r") if data =~ /password/
end
##########################################################################

# limit the hosts to run on
cap HOSTS=new.server.com deploy:setup

##########################################################################
task :install, roles: :web do
  run "#{sudo} add-apt-repository ppa:nginx/stable",:pty => true do |ch, stream, data|
    if data =~ /Press.\[ENTER\].to.continue/
      #prompt, and then send the response to the remote process
      ch.send_data(Capistrano::CLI.password_prompt("Press enter to continue:") + "\n")
    else
      #use the default handler for all other text
      Capistrano::Configuration.default_io_proc.call(ch,stream,data)
    end
  end

  run "#{sudo} apt-get -y update"
  run "#{sudo} apt-get -y install nginx"
end
##########################################################################

##########################################################################
# here is a method that redfeines rbenv
def rbenv(command)
  run "rbenv #{command}", :pty => true do |ch, stream, data|
    if data =~ /\[sudo\].password.for/
      ch.send_data(Capistrano::CLI.password_prompt("Password:") + "\n")
    else
      Capistrano::Configuration.default_io_proc.call(ch, stream, data)
    end
  end
end
##########################################################################

##########################################################################
task :install, roles: :db, only: {primary: true} do
  run "#{sudo} add-apt-repository ppa:pitti/postgresql",:pty => true do |ch, stream, data|
    if data =~ /Press.\[ENTER\].to.continue/
      #prompt, and then send the response to the remote process
      ch.send_data(Capistrano::CLI.password_prompt("Press enter to continue:") + "\n")
    else
      #use the default handler for all other text
      Capistrano::Configuration.default_io_proc.call(ch,stream,data)
    end
  end

  run "#{sudo} apt-get -y update"
  run "#{sudo} apt-get -y install postgresql libpq-dev"
end
##########################################################################

##########################################################################
def press_enter( ch, stream, data)
  if data =~ /Press.\[ENTER\].to.continue/
    # prompt, and then send the response to the remote process
    ch.send_data( "\n")
  else
    # use the default handler for all other text
    Capistrano::Configuration.default_io_proc.call( ch, stream, data)
  end
end


run "#{sudo} add-apt-repository ppa:pitti/postgresql", pty: true do |ch, stream, data|
  press_enter(ch, stream, data)
end
##########################################################################

##########################################################################
#add the following to base.rb
def add_apt_repository(repo)
  run "#{sudo} add-apt-repository #{repo}", :pty => true do |ch, stream, data|
    if data =~ /Press.\[ENTER\].to.continue/
      ch.send_data("\n")
    else
      Capistrano::Configuration.default_io_proc.call(ch, stream, data)
    end
  end
end
# now use it in all recipes that call for add-apt-repository
add_apt_repository 'ppa:nginx/stable'
##########################################################################

##########################################################################
# imagemagick obviously
namespace :imagemagick do
  desc "Install the latest release of ImageMagick and the MagickWand Dev Library"
  task :install, roles: :app do
    run "#{sudo} apt-get -y update"
    run "#{sudo} apt-get -y install imagemagick libmagickwand-dev"
  end
  after "deploy:install", "imagemagick:install"
end
##########################################################################

##########################################################################
# add the file config/recipes/ssh.rb
load "config/recipes/base"

namespace :ssh do
  desc "Setup long timeouts for ssh connection"
  task :install, roles: :app do
    sshd = <<-BASHRC
  ClientAliveInterval 60
  ClientAliveCountMax 1200
    BASHRC
    cmd = %Q{grep -R "ClientAliveInterval" /etc/ssh/sshd_config}
    content = capture( %Q{bash -c '#{cmd}' || echo "false"}).strip
    if content == 'false'
      put sshd, '/tmp/sshd'
      run 'cat /etc/ssh/sshd_config /tmp/sshd > /tmp/sshd.tmp'
      run 'rm /tmp/sshd'
      run "#{sudo} mv /tmp/sshd.tmp /etc/ssh/sshd_config"
    else
      run 'echo "FILE /etc/ssh/sshd_config" IS ALREADY UPDATED!'
    end
  end
  after "deploy:install", "ssh:install"
end
##########################################################################

##########################################################################
# add the file config/recipes/base.rb
def template(from, to)
  erb = File.read(File.expand_path("../templates/#{from}", __FILE__))
  put ERB.new(erb).result(binding), to
end
##########################################################################

##########################################################################
# postgres.rb
set_default(:postgresql_host, "localhost")
set_default(:postgresql_user) { application }
set_default(:postgresql_password) { Capistrano::CLI.password_prompt "PostgreSQL Password: " }
set_default(:postgresql_database) { "#{application}_production" }

namespace :postgresql do
  desc "Install the latest stable release of PostgreSQL."
  task :install, roles: :db, only: {primary: true} do
    super_user do
      run "add-apt-repository -y ppa:pitti/postgresql"
      run "apt-get -y update"
      run "apt-get -y install postgresql libpq-dev"
    end
  end
  after "deploy:install", "postgresql:install"

  desc "Create a database for this application."
  task :create_database, roles: :db, only: {primary: true} do
    super_user do
      run %Q{sudo -u postgres psql -c "create user #{postgresql_user} with password '#{postgresql_password}';"}
      run %Q{sudo -u postgres psql -c "create database #{postgresql_database} owner #{postgresql_user};"}
    end
  end
  after "deploy:setup", "postgresql:create_database"

  desc "Generate the database.yml configuration file."
  task :setup, roles: :app do
    run "mkdir -p #{shared_path}/config"
    template "postgresql.yml.erb", "#{shared_path}/config/database.yml"
  end
  after "deploy:setup", "postgresql:setup"

  desc "Symlink the database.yml file into latest release"
  task :symlink, roles: :app do
    run "ln -nfs #{shared_path}/config/database.yml #{release_path}/config/database.yml"
  end
  after "deploy:finalize_update", "postgresql:symlink"
end
##########################################################################
